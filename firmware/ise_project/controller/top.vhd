-- File: top.vhd
-- Generated by MyHDL 0.7
-- Date: Thu Mar 21 15:50:34 2013


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_07.all;

entity top is
    port (
        reset: in std_logic;
        clock: in std_logic;
        clockFtdi: in std_logic;
        adc1data: in unsigned(7 downto 0);
        adc2data: in unsigned(7 downto 0);
        adc1pd: out std_logic;
        adc2pd: out std_logic;
        adc1relatt: out std_logic;
        adc2relatt: out std_logic;
        adc1relco: out std_logic;
        adc2relco: out std_logic;
        led0: out std_logic;
        led1: out std_logic;
        logicAnalyzer: in unsigned(15 downto 0);
        la1dir: out std_logic;
        la2dir: out std_logic;
        la1oe: out std_logic;
        la2oe: out std_logic;
        serialOut: out std_logic;
        load: out std_logic;
        ldac: out std_logic;
        clkDacOut: out std_logic;
        sda: inout std_logic;
        scl: inout std_logic;
        rxf: in std_logic;
        oe: out std_logic;
        txe: in std_logic;
        rd: out std_logic;
        wr: out std_logic;
        siwu: out std_logic;
        adbus: inout unsigned(7 downto 0)
    );
end entity top;


architecture MyHDL of top is

signal decimatorNewValueFlag : std_logic;
signal adc1pd_i: std_logic;
signal digitalTriggerReset: std_logic;
signal ldac_i: std_logic;
signal oe_i: std_logic;
signal analogTrigger2Reset: std_logic;
signal bufferDataDirection: std_logic;
signal serialOut_i: std_logic;
signal trigger2Value: unsigned(7 downto 0);
signal dacBusy: std_logic;
signal led1_i: std_logic;
signal dacVrefBotA: unsigned(7 downto 0);
signal ft245busy: std_logic;
signal bufferReady: std_logic;
signal adc2pd_i: std_logic;
signal trigger1Value: unsigned(7 downto 0);
signal analog2Trigger: std_logic;
signal decimator2out: unsigned(7 downto 0);
signal txe_i: std_logic;
signal trigger2Type: std_logic;
signal siwu_i: std_logic;
signal dacVrefBotB: unsigned(7 downto 0);
signal clock_i: std_logic;
signal dacStrobe: std_logic;
signal decimator1out: unsigned(7 downto 0);
signal wr_i: std_logic;
signal digipotReset: std_logic;
signal ft245dataWaitIn: std_logic;
signal digipotValue: unsigned(6 downto 0);
signal adc2relco_i: std_logic;
signal trigger1Type: std_logic;
signal bufferDataIn: unsigned(31 downto 0);
signal triggerPattern: unsigned(63 downto 0);
signal la2oe_i: std_logic;
signal logicAnalyzer_i: unsigned(15 downto 0);
signal logicAnalyzer_dec: unsigned(15 downto 0);
signal bufferAllowWriteOverlap: std_logic;
signal clockFtdi_i: std_logic;
signal bufferclock: std_logic;
signal ft245reset: std_logic;
signal ft245din: unsigned(7 downto 0);
signal la1oe_i: std_logic;
signal rd_i: std_logic;
signal decimationStyle: unsigned(1 downto 0);
signal decimationRatio: unsigned(8 downto 0);
signal rxf_i: std_logic;
signal alwaysEn: std_logic;
signal digipotBusy: std_logic;
signal la2dir_i: std_logic;
signal adc1relatt_i: std_logic;
signal adc2relatt_i: std_logic;
signal ft245rw: std_logic;
signal dacReset: std_logic;
signal dacVrefTopA: unsigned(7 downto 0);
signal decimator1in: unsigned(7 downto 0);
signal dacVrefTopB: unsigned(7 downto 0);
signal trigger1Slope: std_logic;
signal bufferReset: std_logic;
signal ft245strobe: std_logic;
signal decimationRatioBase: unsigned(3 downto 0);
signal bufferDataOut: unsigned(31 downto 0);
signal trigger2Slope: std_logic;
signal triggerSamples: unsigned(1 downto 0);
signal decimator2in: unsigned(7 downto 0);
signal la1dir_i: std_logic;
signal analogTrigger1Reset: std_logic;
signal led0_i: std_logic;
signal digiTrigger: std_logic;
signal decimatorclock: std_logic;
signal load_i: std_logic;
signal clkDacOut_i: std_logic;
signal adc1relco_i: std_logic;
signal bufferOutputInputReady: std_logic;
signal ft245dataWaitOut: std_logic;
signal ft245dout: unsigned(7 downto 0);
signal analog1Trigger: std_logic;
signal digipotStrobe: std_logic;
signal reset_i: std_logic;


begin





decimator1in <= adc1data;
decimator2in <= adc2data;
oe <= oe_i;
rxf_i <= rxf;
txe_i <= txe;
rd <= rd_i;
wr <= wr_i;
siwu <= siwu_i;
serialOut <= serialOut_i;
load <= load_i;
ldac <= ldac_i;
clkDacOut <= clkDacOut_i;
adc1pd <= adc1pd_i;
adc2pd <= adc2pd_i;
adc1relatt <= adc1relatt_i;
adc2relatt <= adc2relatt_i;
adc1relco <= adc1relco_i;
adc2relco <= adc2relco_i;
led0 <= led0_i;
led1 <= led1_i;
logicAnalyzer_i <= logicAnalyzer;
la1dir <= la1dir_i;
la2dir <= la2dir_i;
la1oe <= la1oe_i;
la2oe <= la2oe_i;
clock_i <= clock;
clockFtdi_i <= clockFtdi;
reset_i <= reset;

decimator: entity work.decimator(MyHDL)
    port map (
        clk=>clock_i,
        reset=>reset_i,
        dataIn=>decimator1in,
        dataOut=>decimator1out,
        decimationRatio=>decimationRatio,
		  decimationRatioBase=>decimationRatioBase,
        decimationStyle_ext=>decimationStyle,
        dataClk=>decimatorclock,
        newValueFlag=>decimatorNewValueFlag
    );

decimator1: entity work.decimator(MyHDL)
    port map (
        clk=>clock_i,
        reset=>reset_i,
        dataIn=>decimator2in,
        dataOut=>decimator2out,
        decimationRatio=>decimationRatio,
		  decimationRatioBase=>decimationRatioBase,
        decimationStyle_ext=>decimationStyle,
        dataClk=>decimatorclock,
        newValueFlag=>decimatorNewValueFlag
    );

controller: entity work.controller(MyHDL)
    port map (
        clk=>clockFtdi_i,
        reset=>reset_i,
        ft245din=>ft245din,
        ft245dout=>ft245dout,
        ft245rw=>ft245rw,
        ft245busy=>ft245busy,
        ft245oe=>oe_i,
		  ft245wr=>wr_i,
        ft245dataWaitIn=>ft245dataWaitIn,
        ft245dataWaitOut=>ft245dataWaitOut,
        ft245strobe=>ft245strobe,
        ft245reset=>ft245reset,
        dacReset=>dacReset,
        dacVrefTopA=>dacVrefTopA,
        dacVrefTopB=>dacVrefTopB,
        dacVrefBotA=>dacVrefBotA,
        dacVrefBotB=>dacVrefBotB,
        dacStrobe=>dacStrobe,
        dacBusy=>dacBusy,
        digipotReset=>digipotReset,
        digipotValue=>digipotValue,
        digipotStrobe=>digipotStrobe,
        digipotBusy=>digipotBusy,
        bufferReset=>bufferReset,
        bufferDataOut=>bufferDataOut,
        bufferDataIn=>bufferDataIn,
        bufferReady=>bufferReady,
        bufferOutputInputReady=>bufferOutputInputReady,
        bufferAllowWriteOverlap=>bufferAllowWriteOverlap,
        bufferDataDirection=>bufferDataDirection,
        decimatorNewValueFlag=>decimatorNewValueFlag,
        decimationRatioBase=>decimationRatioBase,
        decimationStyle=>decimationStyle,
        decimator1out=>decimator1out,
        decimator2out=>decimator2out,
        trigger1Type=>trigger1Type,
        trigger1Slope=>trigger1Slope,
        analogTrigger1Reset=>analogTrigger1Reset,
        trigger1Value=>trigger1Value,
        analog1Trigger=>analog1Trigger,
        trigger2Type=>trigger2Type,
        trigger2Slope=>trigger2Slope,
        analogTrigger2Reset=>analogTrigger2Reset,
        trigger2Value=>trigger2Value,
        analog2Trigger=>analog2Trigger,
        digitalTriggerReset=>digitalTriggerReset,
        triggerPattern=>triggerPattern,
        triggerSamples=>triggerSamples,
        digiTrigger=>digiTrigger,
        adc1pd=>adc1pd_i,
        adc2pd=>adc2pd_i,
        adc1relatt=>adc1relatt_i,
        adc2relatt=>adc2relatt_i,
        adc1relco=>adc1relco_i,
        adc2relco=>adc2relco_i,
        led0=>led0_i,
        led1=>led1_i,
        logicAnalyzer=>logicAnalyzer_dec,
        la1dir=>la1dir_i,
        la2dir=>la2dir_i,
        la1oe=>la1oe_i,
        la2oe=>la2oe_i,
		  fastClk=>clock_i
    );

trigger_analog: entity work.trigger_analog(MyHDL)
    port map (
        clk=>clock_i,
        reset=>analogTrigger1Reset,
        dataIn=>decimator1out,
        triggerType=>trigger1Type,
        slope=>trigger1Slope,
        value=>trigger1Value,
        trigger=>analog1Trigger,
        inputEnable=>decimatorclock,
		  alwaysEn=>alwaysEn
    );

trigger_analog1: entity work.trigger_analog(MyHDL)
    port map (
        clk=>clock_i,
        reset=>analogTrigger2Reset,
        dataIn=>decimator2out,
        triggerType=>trigger2Type,
        slope=>trigger2Slope,
        value=>trigger2Value,
        trigger=>analog2Trigger,
        inputEnable=>decimatorclock,
		  alwaysEn=>alwaysEn
    );

buff: entity work.buff(MyHDL)
    port map (
        clk=>clock_i,
        reset=>bufferReset,
        dataIn=>bufferDataIn,
        dataOut=>bufferDataOut,
        bufferReady=>bufferReady,
        outputInputReady=>bufferOutputInputReady,
        allowWriteOverlap=>bufferAllowWriteOverlap,
        dataDirection=>bufferDataDirection,
        clkDecimator=>decimatorclock,
        clkFtdi=>clockFtdi,
		  alwaysEn=>alwaysEn
    );

ft245sync: entity work.ft245sync(MyHDL)
    port map (
        clk=>clockFtdi_i,
        reset=>ft245reset,
        rxf=>rxf_i,
        txe=>txe_i,
        rd_int=>rd_i,
        wr_int=>wr_i,
        oe_int=>oe_i,
        siwu=>siwu_i,
        adbus=>adbus,
        dataIn=>ft245din,
        dataOut=>ft245dout,
        rw=>ft245rw,
        busy=>ft245busy,
        dataWaitIn=>ft245dataWaitIn,
        dataWaitOut=>ft245dataWaitOut,
        strobe=>ft245strobe
    );

digipot_controller: entity work.digipot_controller(MyHDL)
    port map (
        clk=>clockFtdi_i,
        reset=>digipotReset,
        value=>digipotValue,
        strobe=>digipotStrobe,
        busy=>digipotBusy,
        sda=>sda,
        scl=>scl
    );

dac_controller: entity work.dac_controller(MyHDL)
    port map (
        clk=>clockFtdi_i,
        reset=>dacReset,
        vrefTopA=>dacVrefTopA,
        vrefTopB=>dacVrefTopB,
        vrefBotA=>dacVrefBotA,
        vrefBotB=>dacVrefBotB,
        strobe=>dacStrobe,
        serialOut=>serialOut_i,
        load=>load_i,
        ldac=>ldac_i,
        clkDacOut=>clkDacOut_i,
        busy=>dacBusy
    );

trigger_digital: entity work.trigger_digital(MyHDL)
    port map (
        clk=>decimatorclock,
        reset=>digitalTriggerReset,
        dataIn=>logicAnalyzer_dec,
        pattern=>triggerPattern,
        samples=>triggerSamples,
        trigger=>digiTrigger,
        inputEnable=>decimatorclock,
		  alwaysEn=>alwaysEn
    );

digital_decimator: entity work.digital_decimator(MyHDL)
    port map (
        clk=>clock_i,
        reset=>reset_i,
        dataIn=>logicAnalyzer_i,
        dataOut=>logicAnalyzer_dec,
        decimationRatio=>decimationRatio,
        dataClk=>decimatorclock
    );

decimator_clock_divisor: entity work.decimator_clock_divisor(MyHDL)
    port map (
        clk=>clock_i,
        reset=>reset_i,
        decimationRatioBase=>decimationRatioBase,
        decimationRatio=>decimationRatio,
        clkDataOut=>decimatorclock,
        newValueFlag=>decimatorNewValueFlag,
		  alwaysEn=>alwaysEn
    );
	 
end architecture MyHDL;
